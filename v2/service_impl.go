/*
Implement of box.Service
This file is generated by github.com/Hexilee/impler at 2018-10-15 00:14:07.064259 +0800 CST m=+0.915246928
DON'T EDIT IT!
*/

package box

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"
	"os"
	"strings"
)

func NewService() Service {
	service := &serviceImpl{
		baseUrl: "https://box.zjuqsc.com/item",
		cookies: make([]*http.Cookie, 0),
		header:  make(http.Header),
	}
	return service
}

type serviceImpl struct {
	baseUrl string
	header  http.Header
	cookies []*http.Cookie
}

func (service serviceImpl) Stat(token string) (genResult *http.Response, genErr error) {
	var genBody io.ReadWriter
	var genRequest *http.Request
	genUri := fmt.Sprintf("issec/%s", token)
	genFinalUrl := strings.TrimRight(service.baseUrl, "/") + "/" + strings.TrimLeft(genUri, "/")
	genRequest, genErr = http.NewRequest("GET", genFinalUrl, genBody)
	if genErr != nil {
		return
	}
	for genHeaderKey, genHeaderSlice := range service.header {
		for _, genHeaderValue := range genHeaderSlice {
			genRequest.Header.Add(genHeaderKey, genHeaderValue)
		}
	}
	for _, genCookie := range service.cookies {
		genRequest.AddCookie(genCookie)
	}
	var genResponse *http.Response
	genClient := new(http.Client)
	genResponse, genErr = genClient.Do(genRequest)
	if genErr != nil {
		return
	}
	genResult = genResponse
	return
}
func (service serviceImpl) Upload(path string) (genResult *UploadResult, genStatusCode int, genErr error) {
	var genBody io.ReadWriter
	var genRequest *http.Request
	genUri := "/add_item"
	var genBodyWriter *multipart.Writer
	genBody = bytes.NewBufferString("")
	genBodyWriter = multipart.NewWriter(genBody)
	{
		var genPartWriter io.Writer
		var genFile *os.File
		var genFilePath string
		genFilePath = path
		genFile, genErr = os.Open(genFilePath)
		defer genFile.Close()
		if genErr != nil {
			return
		}
		genPartWriter, genErr = genBodyWriter.CreateFormFile("file", genFilePath)
		if genErr != nil {
			return
		}
		_, genErr = io.Copy(genPartWriter, genFile)
		if genErr != nil {
			return
		}
	}
	genBodyWriter.WriteField("PHP_SESSION_UPLOAD_PROGRESS", "qscbox")
	genBodyWriter.WriteField("filecount", "1")
	genBodyWriter.WriteField("callback", "handleUploadCallback")
	genBodyWriter.WriteField("is_ie9", "0")
	genBodyWriter.Close()
	genFinalUrl := strings.TrimRight(service.baseUrl, "/") + "/" + strings.TrimLeft(genUri, "/")
	genRequest, genErr = http.NewRequest("POST", genFinalUrl, genBody)
	if genErr != nil {
		return
	}
	for genHeaderKey, genHeaderSlice := range service.header {
		for _, genHeaderValue := range genHeaderSlice {
			genRequest.Header.Add(genHeaderKey, genHeaderValue)
		}
	}
	for _, genCookie := range service.cookies {
		genRequest.AddCookie(genCookie)
	}
	genRequest.Header.Set("Content-Type", genBodyWriter.FormDataContentType())
	var genResponse *http.Response
	genClient := new(http.Client)
	genResponse, genErr = genClient.Do(genRequest)
	if genErr != nil {
		return
	}
	var genResultData []byte
	genResultData, genErr = ioutil.ReadAll(genResponse.Body)
	defer genResponse.Body.Close()
	if genErr != nil {
		return
	}
	genStatusCode = genResponse.StatusCode
	genResult = &UploadResult{}
	genErr = json.Unmarshal(genResultData, genResult)
	if genErr != nil {
		return
	}
	return
}
func (service serviceImpl) Verify(token string, secToken string) (genResult *http.Response, genErr error) {
	var genBody io.ReadWriter
	var genRequest *http.Request
	genUri := fmt.Sprintf("verify/%s/%s", token, secToken)
	genFinalUrl := strings.TrimRight(service.baseUrl, "/") + "/" + strings.TrimLeft(genUri, "/")
	genRequest, genErr = http.NewRequest("GET", genFinalUrl, genBody)
	if genErr != nil {
		return
	}
	for genHeaderKey, genHeaderSlice := range service.header {
		for _, genHeaderValue := range genHeaderSlice {
			genRequest.Header.Add(genHeaderKey, genHeaderValue)
		}
	}
	for _, genCookie := range service.cookies {
		genRequest.AddCookie(genCookie)
	}
	var genResponse *http.Response
	genClient := new(http.Client)
	genResponse, genErr = genClient.Do(genRequest)
	if genErr != nil {
		return
	}
	genResult = genResponse
	return
}
func (service serviceImpl) Change(newToken string, jiami string, oldToken string, secureId string, tokenSec string, oldSec string, expiration int) (genResult *ChangeResult, genStatusCode int, genErr error) {
	var genBody io.ReadWriter
	var genRequest *http.Request
	genUri := "/change_item"
	genDataMap := make(url.Values)
	genDataMap.Add("new_token", newToken)
	genDataMap.Add("old_token", oldToken)
	genDataMap.Add("secure_id", secureId)
	genDataMap.Add("token_sec", tokenSec)
	genDataMap.Add("old_sec", oldSec)
	genDataMap.Add("expiration", fmt.Sprintf("%d", expiration))
	genDataMap.Add("jiami", jiami)
	genBody = bytes.NewBufferString(genDataMap.Encode())
	genFinalUrl := strings.TrimRight(service.baseUrl, "/") + "/" + strings.TrimLeft(genUri, "/")
	genRequest, genErr = http.NewRequest("POST", genFinalUrl, genBody)
	if genErr != nil {
		return
	}
	for genHeaderKey, genHeaderSlice := range service.header {
		for _, genHeaderValue := range genHeaderSlice {
			genRequest.Header.Add(genHeaderKey, genHeaderValue)
		}
	}
	for _, genCookie := range service.cookies {
		genRequest.AddCookie(genCookie)
	}
	genRequest.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	var genResponse *http.Response
	genClient := new(http.Client)
	genResponse, genErr = genClient.Do(genRequest)
	if genErr != nil {
		return
	}
	var genResultData []byte
	genResultData, genErr = ioutil.ReadAll(genResponse.Body)
	defer genResponse.Body.Close()
	if genErr != nil {
		return
	}
	genStatusCode = genResponse.StatusCode
	genResult = &ChangeResult{}
	genErr = json.Unmarshal(genResultData, genResult)
	if genErr != nil {
		return
	}
	return
}
func (service serviceImpl) Download(token string) (genResult *http.Response, genErr error) {
	var genBody io.ReadWriter
	var genRequest *http.Request
	genUri := fmt.Sprintf("get/%s", token)
	genFinalUrl := strings.TrimRight(service.baseUrl, "/") + "/" + strings.TrimLeft(genUri, "/")
	genRequest, genErr = http.NewRequest("GET", genFinalUrl, genBody)
	if genErr != nil {
		return
	}
	for genHeaderKey, genHeaderSlice := range service.header {
		for _, genHeaderValue := range genHeaderSlice {
			genRequest.Header.Add(genHeaderKey, genHeaderValue)
		}
	}
	for _, genCookie := range service.cookies {
		genRequest.AddCookie(genCookie)
	}
	var genResponse *http.Response
	genClient := new(http.Client)
	genResponse, genErr = genClient.Do(genRequest)
	if genErr != nil {
		return
	}
	genResult = genResponse
	return
}
func (service serviceImpl) DownloadSec(token string, secToken string) (genResult *http.Response, genErr error) {
	var genBody io.ReadWriter
	var genRequest *http.Request
	genUri := fmt.Sprintf("get/%s/%s", token, secToken)
	genFinalUrl := strings.TrimRight(service.baseUrl, "/") + "/" + strings.TrimLeft(genUri, "/")
	genRequest, genErr = http.NewRequest("GET", genFinalUrl, genBody)
	if genErr != nil {
		return
	}
	for genHeaderKey, genHeaderSlice := range service.header {
		for _, genHeaderValue := range genHeaderSlice {
			genRequest.Header.Add(genHeaderKey, genHeaderValue)
		}
	}
	for _, genCookie := range service.cookies {
		genRequest.AddCookie(genCookie)
	}
	var genResponse *http.Response
	genClient := new(http.Client)
	genResponse, genErr = genClient.Do(genRequest)
	if genErr != nil {
		return
	}
	genResult = genResponse
	return
}
